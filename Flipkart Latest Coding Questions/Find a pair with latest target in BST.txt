Given a Binary Search Tree and a target sum. Check whether there is a pair of Nodes in the BST with value summing up to the target sum. 


Example 1:

Input:
        2
      /   \
     1     3
sum = 5
Output: 1
Explanation: 2+3 = 5
 

Example 2:

Input:
           6
          /    
         5     
        /
       3 
     /  \
    1    4
sum = 2
Output: 0
Explanation: Sum 2 is not possible.
---------------------------------------------------------------------------------------------------------------------------


 HashSet<Integer> nodeValues = new HashSet<>();
    public int isPairPresent(Node root, int target){
        // code here
         Stack<Node > it1 = new Stack<Node>(), it2 = new Stack<Node>();
 
    Node c = root;
    while (c != null)
    {
        it1.push(c);
        c = c.left;
    }
 
    c = root;
    while (c != null)
    {
        it2.push(c);
        c = c.right;
    }
         
    while (it1.peek() != it2.peek()) 
    {
 
        int v1 = it1.peek().data, v2 = it2.peek().data;
 
        if (v1 + v2 == target)
            return 1;
 
        if (v1 + v2 < target) 
        {
            c = it1.peek().right;
            it1.pop();
            while (c != null)
            {
                it1.push(c); 
                c = c.left;
            }
        }
 
        else
        {
            c = it2.peek().left;
            it2.pop();
            while (c != null)
            {
                it2.push(c);
                c = c.right;
            }
        }
    }
     
    return 0;
    
        
    }
}